[loggers]
#keys = root, nova
#keys = root, fluent
keys = root, zmq

[handlers]
keys = stderr, stdout, watchedfile, syslog, null, fluent, zmq

[formatters]
keys = legacynova, default

[logger_root]
level = WARNING
handlers = null

[logger_nova]
level = INFO
handlers = watchedfile
qualname = nova

[logger_fluent]
level = DEBUG
handlers = fluent
qualname = nova

[logger_zmq]
level = DEBUG
handlers = zmq
qualname = nova

[logger_amqplib]
level = WARNING
handlers = stderr
qualname = amqplib

[logger_sqlalchemy]
level = WARNING
handlers = stderr
qualname = sqlalchemy
# "level = INFO" logs SQL queries.
# "level = DEBUG" logs SQL queries and results.
# "level = WARNING" logs neither.  (Recommended for production systems.)

[logger_boto]
level = WARNING
handlers = stderr
qualname = boto

[logger_suds]
level = INFO
handlers = stderr
qualname = suds

[logger_eventletwsgi]
level = WARNING
handlers = stderr
qualname = eventlet.wsgi.server

[handler_stderr]
class = StreamHandler
args = (sys.stderr,)
formatter = legacynova

[handler_stdout]
level = DEBUG
class = StreamHandler
args = (sys.stdout,)
formatter = legacynova

[handler_watchedfile]
class = handlers.WatchedFileHandler
args = ('/var/log/nova/nova.log',)
formatter = legacynova

[handler_rotatingfile]
class = RotatingFileHandler
args = ('/var/log/nova/nova.log',)
formatter = legacynova

[handler_syslog]
class = handlers.SysLogHandler
args = ('/dev/log', handlers.SysLogHandler.LOG_USER)
formatter = legacynova

[handler_null]
class = nova.openstack.common.log.NullHandler
formatter = default
args = ()

[handler_fluent]
class = logcas.logger.fluent_logger.FluentHandler
args = ('app.nova', 'logserver.example.com', 24224)

[handler_zmq]
class = logcas.logger.zmq_logger.ZmqHandler
args = ('tcp://localhost:2120',)

[formatter_legacynova]
class = nova.openstack.common.log.LegacyFormatter

[formatter_default]
format = %(message)s
